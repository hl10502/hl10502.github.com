<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[C#反编译.resources资源文件]]></title>
      <url>%2F2017%2F02%2F28%2Fvs2013-decompile%2F</url>
      <content type="text"><![CDATA[C#反编译的.resources资源文件，使用resgen命令生成.resx文件在项目中使用C#的.dll文件反编译出来的.resources资源文件，需要生成.resx才能在项目中使用。 打开VS2013命令行 执行resgen命令生成resx文件将资源文件copy到命令目录下（D:\Program Files (x86)\Microsoft Visual Studio 12.0\VC），执行命令 resgen xx.resources xx.resx。 例如WinAPI.FriendlyErrorNames.resources文件 修改resx文件例如：生成的.resx文件为WinAPI.FriendlyErrorNames.resx。找到项目中的FriendlyErrorNames.cs文件，WinAPI为namespace，FriendlyErrorNames.cs文件中资源为WinAPI.FriendlyErrorNames。 重命名WinAPI.FriendlyErrorNames.resx为FriendlyErrorNames.resx，并将FriendlyErrorNames.resx文件copy到项目的WinAPI目录中（与FriendlyErrorNames.cs同一目录）。 注意如下代码的资源文件的路径为”WinAPI.FriendlyErrorNames”。一般加载不了资源可能是路径写错。12345678910111213[EditorBrowsable(EditorBrowsableState.Advanced)] public static System.Resources.ResourceManager ResourceManager &#123; get &#123; if (object.ReferenceEquals(resourceMan, null)) &#123; System.Resources.ResourceManager manager = new System.Resources.ResourceManager(&quot;WinAPI.FriendlyErrorNames&quot;, typeof(FriendlyErrorNames).Assembly); resourceMan = manager; &#125; return resourceMan; &#125; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[V2V转换器（五）————ERROR Credentials for user 'root' are invalid on http://169.254.0.1]]></title>
      <url>%2F2017%2F02%2F28%2Fv2v-5%2F</url>
      <content type="text"><![CDATA[ERROR Credentials for user ‘root’ are invalid on http://169.254.0.1XCM所在的XenServer主机的iptables阻止XCM的eth0通过dhcp获取ip，需要关闭XenServer的防火墙。 错误分析XCM的log。 123456-bash-4.2# cat /var/log/conversion/convsvc.log2017-01-13 08:48:03,042 ERROR Credentials for user 'root' are invalid on http://169.254.0.1.2017-01-13 08:48:03,066 ERROR System.InvalidOperationException: Cannot be changed after headers are sent. at System.Net.HttpListenerResponse.set_StatusCode (Int32 value) [0x00000] in &lt;filename unknown&gt;:0 at CookComputing.XmlRpc.XmlRpcListenerService.ProcessRequest (System.Net.HttpListenerContext RequestContext) [0x00000] in &lt;filename unknown&gt;:0 at convsvc.ConversionSvc+&lt;HandleNewContext&gt;c__AnonStorey0.&lt;&gt;m__0 (System.Object state) [0x00000] in &lt;filename unknown&gt;:0 启动XCM的网络失败，eth0不能动态生成IP地址。 123456789-bash-4.2# service network restartShutting down interface eth0: [ OK ]Shutting down interface eth1: [ OK ]Shutting down loopback interface: [ OK ]Bringing up loopback interface: [ OK ]Bringing up interface eth0:Determining IP information for eth0... failed. [FAILED]Bringing up interface eth1: [ OK ] 查看XCM的日志，dhcp接收不到数据。 123456-bash-4.2# tail -f /var/log/messagesJan 13 09:08:28 winhong dhclient: DHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 10 (xid=0x15d3da80)Jan 13 09:08:38 winhong dhclient: DHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 17 (xid=0x15d3da80)Jan 13 09:08:55 winhong dhclient: DHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 15 (xid=0x15d3da80)Jan 13 09:09:10 winhong dhclient: DHCPDISCOVER on eth0 to 255.255.255.255 port 67 interval 13 (xid=0x15d3da80)Jan 13 09:09:23 winhong dhclient: No DHCPOFFERS received. 查看XenServer主机的iptables。 12345678910111213141516171819202122232425262728293031[root@xenserver113 ~]# iptables -LChain INPUT (policy ACCEPT)target prot opt source destinationRH-Firewall-1-INPUT all -- anywhere anywhereChain FORWARD (policy ACCEPT)target prot opt source destinationRH-Firewall-1-INPUT all -- anywhere anywhereChain OUTPUT (policy ACCEPT)target prot opt source destinationChain RH-Firewall-1-INPUT (2 references)target prot opt source destinationACCEPT all -- anywhere anywhereACCEPT icmp -- anywhere anywhere icmp anyACCEPT esp -- anywhere anywhereACCEPT ah -- anywhere anywhereACCEPT udp -- anywhere 224.0.0.251 udp dpt:mdnsACCEPT udp -- anywhere anywhere udp dpt:ippACCEPT tcp -- anywhere anywhere tcp dpt:ippACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHEDACCEPT tcp -- anywhere anywhere ctstate NEW tcp dpt:sshACCEPT udp -- anywhere anywhere ctstate NEW udp dpt:ha-clusterACCEPT tcp -- anywhere anywhere ctstate NEW tcp dpt:httpACCEPT tcp -- anywhere anywhere ctstate NEW tcp dpt:httpsACCEPT tcp -- anywhere anywhere ctstate NEW tcp dpt:4430ACCEPT udp -- anywhere anywhere ctstate NEW udp dpt:ntpACCEPT tcp -- anywhere anywhere ctstate NEW tcp dpt:ndmpACCEPT tcp -- anywhere anywhere ctstate NEW tcp dpt:vceREJECT all -- anywhere anywhere reject-with icmp-host-prohibited 查看XenServer主机的iptables的状态。 1234567891011121314151617181920212223242526272829303132[root@xenserver113 ~]# service iptables statusTable: filterChain INPUT (policy ACCEPT)num target prot opt source destination1 RH-Firewall-1-INPUT all -- 0.0.0.0/0 0.0.0.0/0Chain FORWARD (policy ACCEPT)num target prot opt source destination1 RH-Firewall-1-INPUT all -- 0.0.0.0/0 0.0.0.0/0Chain OUTPUT (policy ACCEPT)num target prot opt source destinationChain RH-Firewall-1-INPUT (2 references)num target prot opt source destination1 ACCEPT all -- 0.0.0.0/0 0.0.0.0/02 ACCEPT icmp -- 0.0.0.0/0 0.0.0.0/0 icmptype 2553 ACCEPT esp -- 0.0.0.0/0 0.0.0.0/04 ACCEPT ah -- 0.0.0.0/0 0.0.0.0/05 ACCEPT udp -- 0.0.0.0/0 224.0.0.251 udp dpt:53536 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 udp dpt:6317 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:6318 ACCEPT all -- 0.0.0.0/0 0.0.0.0/0 ctstate RELATED,ESTABLISHED9 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW tcp dpt:2210 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW udp dpt:69411 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW tcp dpt:8012 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW tcp dpt:44313 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW tcp dpt:443014 ACCEPT udp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW udp dpt:12315 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW tcp dpt:1000016 ACCEPT tcp -- 0.0.0.0/0 0.0.0.0/0 ctstate NEW tcp dpt:1111117 REJECT all -- 0.0.0.0/0 0.0.0.0/0 reject-with icmp-host-prohibited 解決方法关闭XenServer主机的iptables，再次重启XCM的网络。 12345[root@xenserver113 ~]# service iptables stopiptables: Flushing firewall rules: [ OK ]iptables: Setting chains to policy ACCEPT: filter [ OK ]iptables: Unloading modules: [ OK ] 123456789[root@xenserver113 ~]# iptables -LChain INPUT (policy ACCEPT)target prot opt source destinationChain FORWARD (policy ACCEPT)target prot opt source destinationChain OUTPUT (policy ACCEPT)target prot opt source destination 重启XCM的网络。 123456789-bash-4.2# service network restartShutting down interface eth0: [ OK ]Shutting down interface eth1: [ OK ]Shutting down loopback interface: [ OK ]Bringing up loopback interface: [ OK ]Bringing up interface eth0:Determining IP information for eth0... done. [ OK ]Bringing up interface eth1: [ OK ] 查看网络，eth0生成动态的IP。 12345678910-bash-4.2# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 16436 qdisc noqueue link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000 link/ether 32:d9:a4:db:02:8e brd ff:ff:ff:ff:ff:ff inet 169.254.0.2/16 brd 169.254.255.255 scope global eth03: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast qlen 1000 link/ether 46:71:b8:a5:fd:07 brd ff:ff:ff:ff:ff:ff inet 192.168.217.199/24 brd 192.168.217.255 scope global eth1]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[V2V转换器（四）————XenServer Conversion Manager Virtual Appliance虚拟机网络修改]]></title>
      <url>%2F2017%2F02%2F28%2Fv2v-4%2F</url>
      <content type="text"><![CDATA[XenServer Conversion Manager Virtual Appliance网络配置XenServer Conversion Manager Virtual Appliance上有两张网卡。后期由于网络环境变化或者制作模板导入是需要修改网络信息的。 eth0：dhcp方式动态获取，在虚拟化层面使用XenServer主机的内部管理网络，IP地址动态获取为169.254.0.x eth1：static静态配置 查看虚拟机使用的network在主机上查询虚拟机。 1234[root@xenserver113 ~]# xe vm-list name-label="Citrix XCM Virtual Appliance"uuid ( RO) : 522e1ca7-0c99-6090-b0f1-ec4439254286 name-label ( RW): Citrix XCM Virtual Appliance power-state ( RO): running 查看虚拟机的VIF。 1234567891011[root@xenserver113 ~]# xe vif-list vm-uuid=522e1ca7-0c99-6090-b0f1-ec4439254286uuid ( RO) : f0c33a41-f240-9a9f-37fb-3188e3b27358 vm-uuid ( RO): 522e1ca7-0c99-6090-b0f1-ec4439254286 device ( RO): 1 network-uuid ( RO): c73b7b36-e65f-0cf7-0183-3bfdbfed0df0uuid ( RO) : 39ec0a7a-35e6-21ff-085b-371a6e019ef0 vm-uuid ( RO): 522e1ca7-0c99-6090-b0f1-ec4439254286 device ( RO): 0 network-uuid ( RO): 33d92b86-dfc7-950c-51ee-6dc3f9f27394 虚拟机的虚拟网络eth0使用的是物理主机的内部管理网络，物理主机的内部管理IP为169.254.0.1。 123456789101112[root@xenserver113 ~]# xe network-param-list uuid=33d92b86-dfc7-950c-51ee-6dc3f9f27394uuid ( RO) : 33d92b86-dfc7-950c-51ee-6dc3f9f27394 name-label ( RW): Host internal management network name-description ( RW): Network on which guests will be assigned a private link-local IP address which can be used to talk XenAPI VIF-uuids (SRO): 03f850b1-f7bb-320d-8d54-aa3d3cf3a102; 39ec0a7a-35e6-21ff-085b-371a6e019ef0 PIF-uuids (SRO): MTU ( RW): 1500 bridge ( RO): xenapi other-config (MRW): is_guest_installer_network: true; is_host_internal_management_network: true; ip_begin: 169.254.0.1; ip_end: 169.254.255.254; netmask: 255.255.0.0 blobs ( RO): tags (SRW): default-locking-mode ( RW): unlocked 修改虚拟机eth1静态网络eth0的网络是不能修改的。 12345-bash-4.2# cat /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0BOOTPROTO=dhcpONBOOT=yesNOZEROCONF=true 可以修改eth1的网络（IP、子网掩码、网关）。 123456789-bash-4.2# cat /etc/sysconfig/network-scripts/ifcfg-eth1DEVICE=eth1ONBOOT=yesNOZEROCONF=trueBOOTPROTO=noneNETMASK=255.255.255.0IPADDR=192.168.217.222PEERDNS=yesDNS1= 12345-bash-4.2# cat /etc/sysconfig/networkNETWORKING=yesNETWORKING_IPV6=noHOSTNAME=xcmGATEWAY=192.168.217.254]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[V2V转换器（三）————XenServer Conversion Manager Virtual Appliance转换服务convsvc配置]]></title>
      <url>%2F2017%2F02%2F28%2Fv2v-3%2F</url>
      <content type="text"><![CDATA[convsvc服务配置修改XenServer Conversion Manager Virtual Appliance上的主要服务是convsvc，它是整个V2V转换的核心。 在XenServer Conversion Manager Virtual Appliance导入到XenServer之后，需要修改/opt/vpxxcm/conversion/convsvc.exe.config文件配置信息。 IP地址不是动态获取，修改ConversionServer.IP将1&lt;add key="ConversionServer.IP" value="[/etc/dhclient-enter-hooks script will fill it in]" /&gt; 修改成1&lt;add key="ConversionServer.IP" value="localhost" /&gt; 增加日志编码支持在12&lt;appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender"&gt;&lt;param name="File" value="/var/log/conversion/convsvc.log" /&gt; 下面增加1&lt;param name="encoding" value="utf-8" /&gt; 修改自动关闭系统时间将1&lt;add key="JobManager.AutoShutdownDelay" value="300" /&gt; &lt;!-- 5分钟 --&gt; 修改成1&lt;add key="JobManager.AutoShutdownDelay" value="86400" /&gt; &lt;!-- 1天 --&gt; 重启服务1-bash-4.2# /etc/init.d/convsvcd restart]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[V2V转换器（二）————XenServer Conversion Manager Virtual Appliance虚拟机配置]]></title>
      <url>%2F2017%2F02%2F28%2Fv2v-2%2F</url>
      <content type="text"><![CDATA[XenServer Conversion Manager Virtual ApplianceXenServer Conversion Manager Virtual Appliance是执行转换的虚拟设备，需要导入到XenServer主机或资源池中的master主机。 将XenServer-7.0.0-vpx-conversion.xva导入到XenServer主机中（可以使用WinCenterClient工具导入），配置好网络以及相关配置就可以作为XenServer Conversion Manager Virtual Appliance。 配置密码、主机名、网络输入yes，接受license。 设置密码。 设置hostname。 设置网络信息，不使用DHCP。 最后确定所有的配置，自动重启网络。 修改其他配置（可以不修改）查找含有xenserver字符的文件。 12345678910111213-bash-4.2# cd /etc/init.d/-bash-4.2# grep -in xenserver *convsvcd:26:# Init file for Citrix XenServer VM Conversion serviceconvsvcd:29:# description: Citrix XenServer VM conversion serviceeula_render.sh:6: echo -e "\033[44;37;1mCitrix XenServer Conversion Manager Virtual Appliance - End User License Agreement \033[0m"vpx_startup_setup.sh:19:product="XenServer"vpx_startup_setup.sh:20:banner="\033[44;37;1mCitrix XenServer Conversion Manager Virtual Appliance \033[0m"vpx_startup_setup.sh:39: echo -e "The Citrix XenServer Conversion Manager Service is running at \033[40;33;1m$ip\033[0m"vpx_startup_setup.sh:187:makecert -r -n "CN=Citrix XenServer Conversion Manager Appliance" -sv root.key root.cer &gt;&gt; $logfile 2&gt;&amp;1vpx_startup_setup.sh:250:echo "Citrix XenServer Conversion Manager Virtual Appliance configuration is complete."vpx_startup_setup.sh:257:echo -e "The Citrix XenServer Conversion Manager Service is running at \033[40;33;1m$ip\033[0m"xcm_self_configure.sh:69:makecert -r -n "CN=Citrix XenServer Conversion Manager Appliance" -sv root.key root.cer &gt;&gt; $logfile 2&gt;&amp;1xcm_self_configure.sh:131:echo "Citrix XenServer Conversion Manager Virtual Appliance configuration is complete." 修改Citrix XenServer，使用其他字符替换。比如，xx使用WinServer。 123456-bash-4.2# sed -i 's/Citrix XenServer/xx/g' vpx_startup_setup.sh-bash-4.2# sed -i 's/Citrix XenServer/xx/g' convsvcd-bash-4.2# sed -i 's/Citrix XenServer/xx/g' xcm_self_configure.sh-bash-4.2# sed -i 's/Citrix XenServer/xx/g' eula_render.sh-bash-4.2# cd /etc/-bash-4.2# sed -i 's/Citrix XenServer/xx/g' issue 重启虚拟机。 1-bash-4.2# reboot]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[V2V转换器（一）————XenServer Conversion Manager]]></title>
      <url>%2F2017%2F02%2F28%2Fv2v-1%2F</url>
      <content type="text"><![CDATA[XenServer Conversion Manager简介XenServer Conversion Manager：简称XCM，是将VMware的虚拟机转换成XenServer上的虚拟机的工具，即是V2V转换器。 XCM分为两个部分： XenServer Conversion Manager Console XenServer Conversion Manager Virtual Appliance XenServer Conversion Manager ConsoleXenServer Conversion Manager Console是Windows下的用户界面，需要连接到XenServer和XenServer Conversion Manager Virtual Appliance。 XenServer Conversion Manager Virtual ApplianceXenServer Conversion Manager Virtual Appliance是执行转换的虚拟设备，需要导入到XenServer主机或资源池中的master主机。 XenServer Conversion Manager Virtual Appliance需要的资源： XenServer 6.1/XenServer 6.2 SP1/XenServer 6.5 SP1/XenServer 7.0 Disk space: 4GB of disk space Memory: 1GB (will use up to 2GB if available) Virtual CPU allocation: 1 vCPU 通过XenServer Conversion Manager Virtual Appliance这台运行在XenServer主机上的虚拟机，将VMware虚拟机转换为XenServer虚拟机格式，并将这些虚拟机导入到XenServer池或主机来完成虚拟机转换。 转换过程XenServer Conversion Manager Console使用一个简单的向导式操作来连接XenServer主机，转换VMware上的多个虚拟机到XenServer。 连接XenServer主机，启动XenServer Conversion Manager Virtual Appliance 连接VMware Server 获取XenServer的本地或共享存储池作为转换的目标存储 获取VMware虚拟机，选择一个或多个需要转换的VMware虚拟机 在VMware和XenServer之间映射网络设置，以便转换的虚拟机启动,并使用正确的网络设置运行 转换虚拟机 XenServer Conversion Manager不会删除或更改现有的VMware环境。虚拟机将复制到XenServer环境中，而不会从VMware中删除。 VMware与XenServerVMware与XenServer对应的术语 XenServer支持版本 XenServer 6.1 XenServer 6.2 Service Pack 1 XenServer 6.5 Service Pack 1 XenServer 7.0 VMware支持版本 vCenter Server 4.0 and 4.1 vSphere 4.0 and 4.1 ESXi 5.0.0, 5.1.0, 5.5.0 and 6.0.0]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[XenCenter分析（二）]]></title>
      <url>%2F2017%2F02%2F27%2Fxencenter-2%2F</url>
      <content type="text"><![CDATA[要使用XenCenter来管理XenServer/WinServer主机和资源池，以及部署、监视、管理和迁移虚拟机。 首先需要添加XenServer/WinServer物理主机。 AddServerDialog添加服务器的代码在AddServerDialog.cs中。 添加服务器的对话框“添加”按钮的事件AddButton_Click，调用ConnectToServer方法连接服务器。 1234567891011121314151617181920212223242526272829303132333435363738394041public virtual void AddButton_Click(object sender, EventArgs e)&#123; /** *ip地址与端口，可以一次连接多个主机，以&quot;;&quot;分隔 *一般我们连接一个，直接使用ip，端口默认使用80 */ string hostnameAndPort = ServerNameComboBox.Text.Trim(); //用户名 string username = UsernameTextBox.Text.Trim(); //密码 string password = PasswordTextBox.Text; //多主机 string[] multipleHosts; if (TryGetMultipleHosts(hostnameAndPort, out multipleHosts)) &#123; //循环依次连接 foreach (string h in multipleHosts) &#123; ConnectToServer(null, h, ConnectionsManager.DEFAULT_XEN_PORT, username, password, comboBoxClouds.SelectedItem != null ? comboBoxClouds.SelectedItem.ToString() : string.Empty); &#125; &#125; else &#123; string hostname; int port; if (!StringUtility.TryParseHostname(hostnameAndPort, ConnectionsManager.DEFAULT_XEN_PORT, out hostname, out port)) &#123; //分隔ip与端口 hostname = hostnameAndPort; port = ConnectionsManager.DEFAULT_XEN_PORT; &#125; //连接主机 ConnectToServer(connection, hostname, port, username, password, comboBoxClouds.SelectedItem != null ? comboBoxClouds.SelectedItem.ToString() : string.Empty); &#125; Close();&#125; ConnectToServer方法，经ip、用户名、密码等参数组装XenConnection对象，调用XenConnectionUI的BeginConnect方法。 123456789101112131415161718192021222324protected void ConnectToServer(IXenConnection conn, string hostname, int port, string username, string password, string version) &#123; if (conn == null) &#123; XenConnection connection = new XenConnection(); connection.CachePopulated += conn_CachePopulated; connection.fromDialog = true; conn = connection; &#125; else if (!_changedPass) &#123; conn.EndConnect(); // in case we&apos;re already connected &#125; conn.Hostname = hostname; conn.Port = port; conn.Username = username; conn.Password = password; conn.ExpectPasswordIsCorrect = false; conn.Version = version; if (!_changedPass) XenConnectionUI.BeginConnect(conn, true, Owner, false); &#125; XenConnectionUI的BeginConnect方法，调用XenConnection的BeginConnect方法。 123456789101112131415161718192021222324public static void BeginConnect(IXenConnection connection, bool interactive, Form owner, bool initiateMasterSearch) &#123; Program.AssertOnEventThread(); //注册连接事件，连接结果与连接状态的处理 RegisterEventHandlers(connection); if (interactive) &#123; // CA-214953 - Focus on this connection&apos;s dialog, if one exists, otherwise create one ConnectingToServerDialog dlg; if (connectionDialogs.TryGetValue(connection, out dlg)) &#123; UnregisterEventHandlers(connection); if (dlg.WindowState == FormWindowState.Minimized) dlg.WindowState = FormWindowState.Normal; dlg.Focus(); return; &#125; dlg = new ConnectingToServerDialog(connection); connectionDialogs.Add(connection, dlg); dlg.BeginConnect(owner, initiateMasterSearch); &#125; else ((XenConnection)connection).BeginConnect(initiateMasterSearch, PromptForNewPassword); &#125; XenConnection的BeginConnect方法,开启新线程处理连接 1234567891011121314//清除事件队列ClearEventQueue();OnBeforeMajorChange(false);Cache.Clear();OnAfterMajorChange(false);//设置连接任务对象connectTask = new ConnectTask(Hostname, Port);StopMonitor();heartbeat = new Heartbeat(this, XenAdminConfigManager.Provider.ConnectionTimeout);//开启连接工作线程Thread t = new Thread(ConnectWorkerThread);t.Name = &quot;Connection to &quot; + Hostname;t.IsBackground = true;t.Start(connectTask); ConnectWorkerThread线程，调用NewSession方法创建连接的会话。12345678910111213private void ConnectWorkerThread(object o) &#123; ConnectTask task = (ConnectTask)o; Exception error = null; Pool pool = null; try &#123; log.DebugFormat(&quot;IXenConnection: trying to connect to &#123;0&#125;&quot;, HostnameWithPort); //创建连接会话 Session session = NewSession(task.Hostname, task.Port, Username, Password, false); // Save the session so we can log it out later task.Session = session; NewSession方法调用GetNewSession方法1234567private Session NewSession(string hostname, int port, string username, string password, bool isElevated) &#123; Password = password; Username = username; return GetNewSession(hostname, port, username, password, isElevated); &#125; GetNewSession方法，创建会话之后，使用用户名密码登录1234567891011121314151617181920212223private Session GetNewSession(string hostname, int port, string username, string password, bool isElevated) &#123; const int DELAY = 250; // unit = ms int attempt = 0; while (true) &#123; attempt++; string uname = isElevated ? username : Username; string pwd = isElevated ? password : Password; // Keep the password that we&apos;re using for this iteration, as it may // be changed by another thread handling an authentication failure. // For elevated session we use the elevated username and password passed into this function, // as the connection&apos;s Username and Password are not updated. //创建会话 Session session = SessionFactory.CreateSession(this, hostname, port); if (isElevated) session.IsElevatedSession = true; try &#123; //使用用户名、密码登录 session.login_with_password(uname, pwd, !string.IsNullOrEmpty(Version) ? Version : Helper.APIVersionString(API_Version.LATEST), Session.UserAgent); return session; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[XenCenter分析（一）]]></title>
      <url>%2F2017%2F02%2F27%2Fxencenter-1%2F</url>
      <content type="text"><![CDATA[XenCenter是XenServer/WinServer的Windows客户端管理工具，可以非常方便地管理和监视XenServer/WinServer主机和资源池，以及部署、监视、管理和迁移虚拟机。 主要有以下功能： 资源池管理 物理主机管理 虚拟机管理 存储池管理 模板管理 代码放在GitHub上托管，XenCenter 这个是我修改过的XenCenter版本。 项目结构 CFUValidator： CommandLib：命令操作的公共类库，主要是IO、tar、HTTP splash：启动界面的效果，使用C++编写 XenAdmin：XenCenter的主项目，包含所有的page、dialog、view XenAdminTests：XenCenter的测试代码 XenCenterLib：一些工具类库 XenCenterVNC：物理主机、虚拟机的控制台 XenModel：模型类以及XAPI接口 XenOvfApi：OVF相关的API XenOvfTransport：OVF导入导出的工具类库 XenServerHealthCheck：主机健康状态检查 xva_verify：xva文件校验 XenAdminXenAdmin是XenCenter代码的主程序的入口，基于C#的WinForm应用程序开发。研究XenCenter先从XenAdmin项目入手。 XenAdmin主要有以下的代码目录： Actions：界面UI与导入OVF虚拟机的action类 Alerts：告警提示类 Commands：命令模式Commands操作类 ConsoleView：VNC控制台的视图与逻辑操作类 Controls：UI界面 Core：公共类库 Diagnostics：资源（Pool、Host、VM、SR等）检查、状态（HA、PBD等）检查 Dialogs：UI的所有弹出对话框 Help：帮助页面以及文档 HomePage：启动XenCenter之后的主页信息 Images：图片资源 Network：SSL连接与XAPI连接XenServer Plugins：插件管理 Properties：license、配置、资源 RDP： ReportViewer：报表视图 ServerDBs：模拟数据库 SettingsPanels：资源设置相关的page TabPages：菜单的tabpages TestResources：测试资源 Utils：工具类 Wizards：向导基础page与向导式操作page Wlb：负载均衡 XenSearch：搜索相关的类 Program.csWinForm应用的Program类main方法12345678static public void Main(string[] Args) &#123; //Upgrade settings //获取当前操作系统信息 System.Reflection.Assembly a = System.Reflection.Assembly.GetExecutingAssembly(); Version appVersion = a.GetName().Version; string appVersionString = appVersion.ToString(); log.DebugFormat(&quot;Application version of new settings &#123;0&#125;&quot;, appVersionString); 1234567//清空XAPI连接信息ConnectionsManager.XenConnections.Clear();//清空连接的历史信息ConnectionsManager.History.Clear();//初始化搜索Search.InitSearch(Branding.Search);TreeSearch.InitSearch(); 1234567891011121314151617switch (Environment.OSVersion.Version.Major) &#123; case 6: // Vista, 2K8, Win7. if (Application.RenderWithVisualStyles) &#123; // Vista, Win7 with styles. //根据操作系统版本设置样式 TitleBarStartColor = Color.FromArgb(242, 242, 242); TitleBarEndColor = Color.FromArgb(207, 207, 207); TitleBarBorderColor = Color.FromArgb(160, 160, 160); TitleBarForeColor = Color.FromArgb(60, 60, 60); HeaderGradientForeColor = Color.White; HeaderGradientFont = new Font(DefaultFont.FontFamily, 11.25f); HeaderGradientFontSmall = DefaultFont; TabbedDialogHeaderFont = HeaderGradientFont; TabPageRowBorder = Color.Gainsboro; TabPageRowHeader = Color.WhiteSmoke; 1234//运行主窗口MainWindow mainWindow = new MainWindow(argType, args);Application.Run(mainWindow); MainWindow是XenCenter的主窗口。 上面部分是菜单栏与操作栏 左侧是树形菜单栏 右侧是主页与选项]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WinCenterClient分析（二）]]></title>
      <url>%2F2017%2F02%2F24%2Fwincenterclient-2%2F</url>
      <content type="text"><![CDATA[WinCenterClient是WinCenter-Appliance虚拟化管理系统安装程序，使用C# WinForm 框架Wizard方式来实现导入WinCenter虚拟机的功能。 包含以下项目 SharpSSH：C#版本的连接SSH类库，版本比较旧，一直未更新，在WinCenterClient5.5及以后的版本不再使用 Renci.SshNet：C#版本的连接SSH类库，在WinCenterClient5.4及以后的版本使用 WinCenter：WinForm界面 WinServer：修改版的C# XAPI Winzardlib：向导式框架类库 SharpSSHSharpSSH是一个C#开发的实现了SSH2协议的开源组件，支持SSH/SCP/SFTP等协议。 SharpSSH执行sh命令的输入输出都是定向到console。因此不容易从其中取出它的结果。因此需要对源码进行一定的修改，从而得到我们想要的结果。 SSH操作： SharpSSH中修改 SshStream.cs，增加一个方法，把输出定向到流中public void set_OutputStream(Stream stream) WinCenter中定义ShellHelp.cs工具类来连接SSH，执行Linux命令，获取输出结果字符串 由于SharpSSH版本比较旧，一直未更新，而且不支持一些加密算法，在WinCenterClient5.4以后的版本中使用Renci.SshNet来代替 Renci.SshNetRenci.SshNet支持多种加密算法，且不需要处理输入输出流，可以代替SharpSSH。 WinServerWinServer是C#版本的XAPI，兼容XenServer。 WizardLibWizardLib是Wizard向导式WinForm 界面的lib类库。 主要的类： WizardFormWizardForm派生自Form，它负责管理WizardPage集合。另外，它提供了缺省的Wizard界面。创建你自己的向导类的第一件事就是扩展这个类，通常从该类继承，编辑属性或者添加额外的按钮。 WizardPageWizardPage派生自UserControl。提供了向导相关的方法，如 OnSetActive, OnWizardNext等。 WizardLib类图 WizardLib通用组件提供复用的组件给WinCenter界面使用。 IP地址及网关输入控件IPBox IPBox继承UserControl，在组件中放置四个textBox，通过重写OnPaint 、OnResize方法绘制边框等。 Button控件MyButton 默认的Button控件在设置透明背景图片时，鼠标点下会出现黑色的边框。MyButton控件继承Button，MyButton重写ShowFocusCues方法，去掉黑色的边框。 Loading效果控件MyOpaqueLayer 在加载数据时间比较长的情况下，需要使用loading效果提示用户正在加载数据或者操作。 MyOpaqueLayer继承Control，重写OnPaint方法绘制窗体，设置透明的屏蔽层。 OpaqueCommand类用来显示与隐藏屏蔽层。 DataGridView单选框控件 要达到单选效果，需要在业务处理中监听单元格点击事件，触发时，选择当前行，并取消其他所有行的选中，同时更改数据状态。 DataGridView组件默认是不支持单选，要实现单选的功能必须重写DataGridViewCell DataGridViewDisableCheckBoxCell继承DataGridViewCheckBoxCell，重写Paint方法来绘制单选框RadioButton DataGridViewDisableCheckBoxColumn 继承DataGridViewCheckBoxColumn]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WinCenterClient分析（一）]]></title>
      <url>%2F2017%2F02%2F24%2Fwincenterclient-1%2F</url>
      <content type="text"><![CDATA[WinCenterClient是WinCenter-Appliance虚拟化管理系统安装程序，使用C# WinForm 框架Wizard方式来实现导入WinCenter虚拟机的功能。 实现过程 使用HHTP/HHTPS方式导入xva模板文件到主机上，并生成虚拟机 根据元数据文件信息给虚拟机配置相应资源 配置虚拟机 删除原有的VIF 创建新的VIF，生成新的MAC地址，并设置网络为目标主机的管理网络 设置虚拟机的名称 设置虚拟机所属的物理主机 启动虚拟机 动态配置虚拟机的网络信息（IP、网关、子网掩码） 向导式操作步骤向导式的操作，主要由以下步骤组成： 导入来源：虚拟机模板的文件路径 配置主机：虚拟机导入的目标主机 配置存储：虚拟机磁盘数据导入的目标存储 配置网络：配置虚拟机的IP、子网掩码、网关信息 安装虚拟机：导入、配置并启动虚拟机 导入来源选择提前制作好的xva模板文件作为导入来源。在这个步骤中校验模板文件并获取模板文件的元数据信息，包括虚拟磁盘大小、虚拟CPU数量、内存大小、VIF数量、虚拟化版本信息等 配置主机配置虚拟机导入的目标主机 配置存储配置虚拟机导入的目标存储，目标存储可以是目标主机上的本地存储，也可以是资源池内的共享存储 配置网络配置虚拟机可用的IP、子网掩码、网关信息 安装虚拟机导入、配置并启动虚拟机，这个步骤是整个安装过程的最重要的步骤。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo使用本地图片]]></title>
      <url>%2F2017%2F02%2F24%2Fhexo-local-pic%2F</url>
      <content type="text"><![CDATA[在文章中使用本地方式引用图片 安装插件npm install hexo-asset-image --save 修改站点_config.ymlpost_asset_folder:true Hexo提供了一种更方便管理 Asset 的设定：post_asset_folder。当设置post_asset_folder为true参数后，在hexo-hey中发布文章时，Hexo会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有图片资源都放到那个文件夹。 hexo使用本地图片 ├── 图片名称.png ├── 图片名称1.png └── 图片名称2.png hexo使用本地图片.md 在文章中直接引用图片![图片title](图片名称.png)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo博客中的next主题配置]]></title>
      <url>%2F2017%2F02%2F15%2Fhexo-config-more%2F</url>
      <content type="text"><![CDATA[博客搭建之后，修改next主题，增加以下功能： 首页「阅读全文」 站内搜索 文章阅读次数 文章多说评论 社交链接GitHub 设置「阅读全文」在首页显示文章的摘录并显示“阅读全文”按钮，可以通过以下方法： 在每篇文章内容中添加 &lt;!– more –&gt; 配置站内搜索安装hexo-generator-searchdb 1$ npm install hexo-generator-searchdb --save 在站点的 _config.yml中增加 search: path: search.xml field: post 配置阅读次数注册LeanCloud账号，新建应用和Class，可参考next主题配置阅读次数统计 修改next主题的_config.yml文件，将LeanCloud的App ID与App Key复制到leancloud_visitors部分 leancloud_visitors: enable: true app_id: LE6b1aXadasdaksderewldfgrn-gzGzoHsz app_key: WHQseHdLj7t7hyj5546546EXO7 配置多说评论注册多说，并创建站点，可参考next主题集成第三方服务 修改站点与next主题的_config.yml文件，配置duoshuo_shortname duoshuo_shortname: hl10502 hl10502为多说站点名称 修改next主题的_config.yml文件，配置多说分享 uoshuo_share: true 在每一条多说评论后显示评论者所使用的代理信息（如 操作系统、浏览器），修改next主题_config.yml文件，配置 duoshuo_info字段， 设置如下： duoshuo_info: ua_enable: true admin_enable: false user_id: 0 #admin_nickname: 侧边栏社交链接侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。两者配置均在next主题的_config.yml文件中。 配置链接，修改social social: #LinkLabel: Link GitHub: https://github.com/hl10502 #Twitter: https://twitter.com/your-user-name #微博: http://weibo.com/your-user-name #豆瓣: http://douban.com/people/your-user-name #知乎: 配置链接图标，修改 social_icons: enable: true # Icon Mappings. # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome GitHub: github #Twitter: twitter #Weibo: weibo]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo配置标签]]></title>
      <url>%2F2017%2F02%2F14%2Fhexo-config-tags%2F</url>
      <content type="text"><![CDATA[创建标签页面在source目录下，自动创建tags/index.md文件1$ hexo new page tags 修改标签内容添加以下内容到source/tags/index.md文件 type: &quot;tags&quot; comments: false 修改_config.yml站点的_config.yml文件配置tag_dir tag_dir: tags next主题的_config.yml文件配置tags menu: tags: /tags menu_icons: tags: tags 博客文章中添加tags比如在博客文章《使用hexo+github搭建个人博客》的title下面添加 tags: [hexo,hexo-hey,github,个人博客]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用hexo+github搭建个人博客]]></title>
      <url>%2F2017%2F02%2F13%2Fhexo-github-setup-blog%2F</url>
      <content type="text"><![CDATA[使用hexo+github在windows7环境下搭建个人技术博客,在git bash下执行以下bash操作命令。 环境准备 windows7 x64 nodejs 6.9.5 git 2.11.0 hexo 3.2.2 配置github创建仓库打开github主页，新建github仓库，仓库名称为”hl10502.github.com” 配置SSH key生成key 1$ ssh-keygen -t rsa -C "xxx@126.com" //邮箱为github注册的邮箱 打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将生成的key文件（用户目录下的.ssh\id_rsa.pub）内容copy到新建的key中 测试SSH配置 1$ ssh -T git@github.com //固定邮箱 配置全局的用户名、邮箱 1$ git config --global user.name "hl10502" //github用户名 1$ git config --global user.email "xxx@126.com" //邮箱为github注册的邮箱 配置hexo安装hexo（注意：之前安装的nodejs在安装时需要添加环境变量） 1$ npm install -g hexo 在F盘下创建 F:\blog\hexo文件夹，作为blog代码目录，初始化hexo 1$ cd /f/blog/hexo 1$ hexo init 下载next主题 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 修改站点的_config.yml文件的主题为 theme: next 生成静态文件 1$ hexo g 启动hexo服务，可以通过 http://localhost:4000 访问 1$ hexo s 配置hexo-hey插件安装hexo-hey插件 1$ npm install hexo-hey --save 配置站点的_config.yml文件，添加admin部分 #hexo-hey插件 admin: name: hexo password: hey secret: hey hexo expire: 60*1 # cors: http://localhost:4000 登录 http://localhost:4000/admin，可以新建文章，发布到本地生成.md文件 用户名：hexo密码：hey 发布hexo到github安装hexo-deployer-git插件 1$ cd /f/blog/hexo/ 1$ npm install hexo-deployer-git --save 配置站点的_config.yml文件，修改deploy部分，使用SSH上传文件 deploy: type: git repository: git@github.com:hl10502/hl10502.github.com.git branch: master hl10502为github的用户名，hl10502.github.com为仓库名称 部署hexo，上传到github 1$ hexo d 访问个人博客： https://hl10502.github.io]]></content>
    </entry>

    
  
  
</search>
