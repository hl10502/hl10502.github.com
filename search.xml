<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[WinCenterClient分析（二）]]></title>
      <url>%2F2017%2F02%2F24%2Fwincenterclient-2%2F</url>
      <content type="text"><![CDATA[WinCenterClient是WinCenter-Appliance虚拟化管理系统安装程序，使用C# WinForm 框架Wizard方式来实现导入WinCenter虚拟机的功能。 包含以下项目 SharpSSH：C#版本的连接SSH类库，版本比较旧，一直未更新，在WinCenterClient5.5及以后的版本不再使用 Renci.SshNet：C#版本的连接SSH类库，在WinCenterClient5.4及以后的版本使用 WinCenter：WinForm界面 WinServer：修改版的C# XAPI Winzardlib：向导式框架类库 SharpSSHSharpSSH是一个C#开发的实现了SSH2协议的开源组件，支持SSH/SCP/SFTP等协议。 SharpSSH执行sh命令的输入输出都是定向到console。因此不容易从其中取出它的结果。因此需要对源码进行一定的修改，从而得到我们想要的结果。 SSH操作： SharpSSH中修改 SshStream.cs，增加一个方法，把输出定向到流中public void set_OutputStream(Stream stream) WinCenter中定义ShellHelp.cs工具类来连接SSH，执行Linux命令，获取输出结果字符串 由于SharpSSH版本比较旧，一直未更新，而且不支持一些加密算法，在WinCenterClient5.4以后的版本中使用Renci.SshNet来代替 Renci.SshNetRenci.SshNet支持多种加密算法，且不需要处理输入输出流，可以代替SharpSSH。 WinServerWinServer是C#版本的XAPI，兼容XenServer。 WizardLibWizardLib是Wizard向导式WinForm 界面的lib类库。 主要的类： WizardFormWizardForm派生自Form，它负责管理WizardPage集合。另外，它提供了缺省的Wizard界面。创建你自己的向导类的第一件事就是扩展这个类，通常从该类继承，编辑属性或者添加额外的按钮。 WizardPageWizardPage派生自UserControl。提供了向导相关的方法，如 OnSetActive, OnWizardNext等。 WizardLib类图 WizardLib通用组件提供复用的组件给WinCenter界面使用。 IP地址及网关输入控件IPBox IPBox继承UserControl，在组件中放置四个textBox，通过重写OnPaint 、OnResize方法绘制边框等。 Button控件MyButton 默认的Button控件在设置透明背景图片时，鼠标点下会出现黑色的边框。MyButton控件继承Button，MyButton重写ShowFocusCues方法，去掉黑色的边框。 Loading效果控件MyOpaqueLayer 在加载数据时间比较长的情况下，需要使用loading效果提示用户正在加载数据或者操作。 MyOpaqueLayer继承Control，重写OnPaint方法绘制窗体，设置透明的屏蔽层。 OpaqueCommand类用来显示与隐藏屏蔽层。 DataGridView单选框控件 要达到单选效果，需要在业务处理中监听单元格点击事件，触发时，选择当前行，并取消其他所有行的选中，同时更改数据状态。 DataGridView组件默认是不支持单选，要实现单选的功能必须重写DataGridViewCell DataGridViewDisableCheckBoxCell继承DataGridViewCheckBoxCell，重写Paint方法来绘制单选框RadioButton DataGridViewDisableCheckBoxColumn 继承DataGridViewCheckBoxColumn]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[WinCenterClient分析（一）]]></title>
      <url>%2F2017%2F02%2F24%2Fwincenterclient-1%2F</url>
      <content type="text"><![CDATA[WinCenterClient是WinCenter-Appliance虚拟化管理系统安装程序，使用C# WinForm 框架Wizard方式来实现导入WinCenter虚拟机的功能。 实现过程 使用HHTP/HHTPS方式导入xva模板文件到主机上，并生成虚拟机； 根据元数据文件信息给虚拟机配置相应资源； 配置虚拟机； 删除原有的VIF； 创建新的VIF，生成新的MAC地址，并设置网络为目标主机的管理网络； 设置虚拟机的名称； 设置虚拟机所属的物理主机； 启动虚拟机 动态配置虚拟机的网络信息（IP、网关、子网掩码） 向导式操作步骤向导式的操作，主要由以下步骤组成： 导入来源：虚拟机模板的文件路径 配置主机：虚拟机导入的目标主机 配置存储：虚拟机磁盘数据导入的目标存储 配置网络：配置虚拟机的IP、子网掩码、网关信息 安装虚拟机：导入、配置并启动虚拟机 导入来源选择提前制作好的xva模板文件作为导入来源。在这个步骤中校验模板文件并获取模板文件的元数据信息，包括虚拟磁盘大小、虚拟CPU数量、内存大小、VIF数量、虚拟化版本信息等 配置主机配置虚拟机导入的目标主机 配置存储配置虚拟机导入的目标存储，目标存储可以是目标主机上的本地存储，也可以是资源池内的共享存储 配置网络配置虚拟机可用的IP、子网掩码、网关信息 安装虚拟机导入、配置并启动虚拟机，这个步骤是整个安装过程的最重要的步骤。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo使用本地图片]]></title>
      <url>%2F2017%2F02%2F24%2Fhexo-local-pic%2F</url>
      <content type="text"><![CDATA[在文章中使用本地方式引用图片 安装插件npm install hexo-asset-image --save 修改站点_config.ymlpost_asset_folder:true Hexo提供了一种更方便管理 Asset 的设定：post_asset_folder。当设置post_asset_folder为true参数后，在hexo-hey中发布文章时，Hexo会自动建立一个与文章同名的文件夹，可以把与该文章相关的所有图片资源都放到那个文件夹。 hexo使用本地图片 ├── 图片名称.png ├── 图片名称1.png └── 图片名称2.png hexo使用本地图片.md 在文章中直接引用图片![图片title](图片名称.png)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo博客中的next主题配置]]></title>
      <url>%2F2017%2F02%2F15%2Fhexo-config-more%2F</url>
      <content type="text"><![CDATA[博客搭建之后，修改next主题，增加以下功能： 首页「阅读全文」 站内搜索 文章阅读次数 文章多说评论 社交链接GitHub 设置「阅读全文」在首页显示文章的摘录并显示“阅读全文”按钮，可以通过以下方法： 在每篇文章内容中添加 &lt;!– more –&gt; 配置站内搜索安装hexo-generator-searchdb 1$ npm install hexo-generator-searchdb --save 在站点的 _config.yml中增加 search: path: search.xml field: post 配置阅读次数注册LeanCloud账号，新建应用和Class，可参考next主题配置阅读次数统计 修改next主题的_config.yml文件，将LeanCloud的App ID与App Key复制到leancloud_visitors部分 leancloud_visitors: enable: true app_id: LE6b1aXadasdaksderewldfgrn-gzGzoHsz app_key: WHQseHdLj7t7hyj5546546EXO7 配置多说评论注册多说，并创建站点，可参考next主题集成第三方服务 修改站点与next主题的_config.yml文件，配置duoshuo_shortname duoshuo_shortname: hl10502 hl10502为多说站点名称 修改next主题的_config.yml文件，配置多说分享 uoshuo_share: true 在每一条多说评论后显示评论者所使用的代理信息（如 操作系统、浏览器），修改next主题_config.yml文件，配置 duoshuo_info字段， 设置如下： duoshuo_info: ua_enable: true admin_enable: false user_id: 0 #admin_nickname: 侧边栏社交链接侧栏社交链接的修改包含两个部分，第一是链接，第二是链接图标。两者配置均在next主题的_config.yml文件中。 配置链接，修改social social: #LinkLabel: Link GitHub: https://github.com/hl10502 #Twitter: https://twitter.com/your-user-name #微博: http://weibo.com/your-user-name #豆瓣: http://douban.com/people/your-user-name #知乎: 配置链接图标，修改 social_icons: enable: true # Icon Mappings. # KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome GitHub: github #Twitter: twitter #Weibo: weibo]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hexo配置标签]]></title>
      <url>%2F2017%2F02%2F14%2Fhexo-config-tags%2F</url>
      <content type="text"><![CDATA[创建标签页面在source目录下，自动创建tags/index.md文件1$ hexo new page tags 修改标签内容添加以下内容到source/tags/index.md文件 type: &quot;tags&quot; comments: false 修改_config.yml站点的_config.yml文件配置tag_dir tag_dir: tags next主题的_config.yml文件配置tags menu: tags: /tags menu_icons: tags: tags 博客文章中添加tags比如在博客文章《使用hexo+github搭建个人博客》的title下面添加 tags: [hexo,hexo-hey,github,个人博客]]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[使用hexo+github搭建个人博客]]></title>
      <url>%2F2017%2F02%2F13%2Fhexo-github-setup-blog%2F</url>
      <content type="text"><![CDATA[使用hexo+github在windows7环境下搭建个人技术博客,在git bash下执行以下bash操作命令。 环境准备 windows7 x64 nodejs 6.9.5 git 2.11.0 hexo 3.2.2 配置github创建仓库打开github主页，新建github仓库，仓库名称为”hl10502.github.com” 配置SSH key生成key 1$ ssh-keygen -t rsa -C "xxx@126.com" //邮箱为github注册的邮箱 打开github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将生成的key文件（用户目录下的.ssh\id_rsa.pub）内容copy到新建的key中 测试SSH配置 1$ ssh -T git@github.com //固定邮箱 配置全局的用户名、邮箱 1$ git config --global user.name "hl10502" //github用户名 1$ git config --global user.email "xxx@126.com" //邮箱为github注册的邮箱 配置hexo安装hexo（注意：之前安装的nodejs在安装时需要添加环境变量） 1$ npm install -g hexo 在F盘下创建 F:\blog\hexo文件夹，作为blog代码目录，初始化hexo 1$ cd /f/blog/hexo 1$ hexo init 下载next主题 1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 修改站点的_config.yml文件的主题为 theme: next 生成静态文件 1$ hexo g 启动hexo服务，可以通过 http://localhost:4000 访问 1$ hexo s 配置hexo-hey插件安装hexo-hey插件 1$ npm install hexo-hey --save 配置站点的_config.yml文件，添加admin部分 #hexo-hey插件 admin: name: hexo password: hey secret: hey hexo expire: 60*1 # cors: http://localhost:4000 登录 http://localhost:4000/admin，可以新建文章，发布到本地生成.md文件 用户名：hexo密码：hey 发布hexo到github安装hexo-deployer-git插件 1$ cd /f/blog/hexo/ 1$ npm install hexo-deployer-git --save 配置站点的_config.yml文件，修改deploy部分，使用SSH上传文件 deploy: type: git repository: git@github.com:hl10502/hl10502.github.com.git branch: master hl10502为github的用户名，hl10502.github.com为仓库名称 部署hexo，上传到github 1$ hexo d 访问个人博客： https://hl10502.github.io]]></content>
    </entry>

    
  
  
</search>
